
novoapp.elf:     file format elf32-littlenios2
novoapp.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00000f28 memsz 0x00000f28 flags r-x
    LOAD off    0x00001f48 vaddr 0x00008f48 paddr 0x00008f4c align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x00001f50 vaddr 0x00008f50 paddr 0x00008f50 align 2**12
         filesz 0x00000000 memsz 0x0000004c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00000eb8  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  00008ed8  00008ed8  00001ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       00000004  00008f48  00008f4c  00001f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          0000004c  00008f50  00008f50  00001f50  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000023  00000000  00000000  00001f4c  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000310  00000000  00000000  00001f70  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000374b  00000000  00000000  00002280  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000016e9  00000000  00000000  000059cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001157  00000000  00000000  000070b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000600  00000000  00000000  0000820c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000fbf  00000000  00000000  0000880c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001134  00000000  00000000  000097cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_alt_sim_info 00000060  00000000  00000000  0000a900  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000128  00000000  00000000  0000a960  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .thread_model 00000003  00000000  00000000  0000c40b  2**0
                  CONTENTS, READONLY
 16 .cpu          00000003  00000000  00000000  0000c40e  2**0
                  CONTENTS, READONLY
 17 .qsys         00000001  00000000  00000000  0000c411  2**0
                  CONTENTS, READONLY
 18 .simulation_enabled 00000001  00000000  00000000  0000c412  2**0
                  CONTENTS, READONLY
 19 .sysid_hash   00000004  00000000  00000000  0000c413  2**0
                  CONTENTS, READONLY
 20 .sysid_base   00000004  00000000  00000000  0000c417  2**0
                  CONTENTS, READONLY
 21 .sysid_time   00000004  00000000  00000000  0000c41b  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  0000c41f  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  0000c428  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  0000c431  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000008  00000000  00000000  0000c43a  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000026  00000000  00000000  0000c442  2**0
                  CONTENTS, READONLY
 27 .jdi          00004945  00000000  00000000  0000c468  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0005b9b3  00000000  00000000  00010dad  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .text	00000000 .text
00008ed8 l    d  .rodata	00000000 .rodata
00008f48 l    d  .rwdata	00000000 .rwdata
00008f50 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../novoapp_bsp//obj/HAL/src/crt0.o
00008068 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.cpp
000082c4 l     F .text	00000030 _GLOBAL__sub_I_controller
00000000 l    df *ABS*	00000000 Controller.cpp
00000000 l    df *ABS*	00000000 Display.cpp
00000000 l    df *ABS*	00000000 Selector.cpp
00000000 l    df *ABS*	00000000 ChocolateReservoir.cpp
00000000 l    df *ABS*	00000000 CoffeReservoir.cpp
00000000 l    df *ABS*	00000000 MilkReservoir.cpp
00000000 l    df *ABS*	00000000 SugarReservoir.cpp
00000000 l    df *ABS*	00000000 WaterReservoir.cpp
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00008da4 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 
00008a38 g     F .text	00000030 alt_main
00008f4c g       *ABS*	00000000 __flash_rwdata_start
00008654 g     F .text	0000006c _ZN7Display11refreshLedsEv
000086f8 g     F .text	00000008 _ZN7Display15setLedWaterTempEi
000088b4 g     F .text	0000000c _ZN14CoffeReservoirC2Ev
000088dc g     F .text	00000008 _ZN13MilkReservoir9setAmountEi
00008800 g     F .text	00000014 _ZN8Selector17isPrepararPressedEv
000086e0 g     F .text	00000008 _ZN7Display16setLedMocacchinoEi
00008884 g     F .text	00000014 _ZN8Selector10getCupSizeEv
00008f48 g     O .rwdata	00000004 jtag_uart
00008000 g     F .entry	0000001c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
00008f5c g     O .bss	00000004 alt_argv
00010f48 g       *ABS*	00000000 _gp
00008c24 g     F .text	00000004 usleep
000088e4 g     F .text	00000008 _ZN13MilkReservoir9getAmountEv
000088a4 g     F .text	00000008 _ZN18ChocolateReservoir9setAmountEi
00008ec4 g     F .text	00000008 __udivsi3
00008d6c g     F .text	00000038 alt_icache_flush
00008898 g     F .text	0000000c _ZN18ChocolateReservoirC2Ev
00008764 g     F .text	00000038 _ZN7Display8showWaitEv
000088ac g     F .text	00000008 _ZN18ChocolateReservoir9getAmountEv
00008f9c g       *ABS*	00000000 __bss_end
00008f64 g     O .bss	00000024 display
000088c0 g     F .text	00000008 _ZN14CoffeReservoir9setAmountEi
00008f50 g     O .bss	00000004 state
000086f0 g     F .text	00000008 _ZN7Display16setLedWaterLevelEi
000082f4 g     F .text	00000040 _ZN10ControllerC1Ev
000086c0 g     F .text	00000008 _ZN7Display11setLedReporEi
000088b4 g     F .text	0000000c _ZN14CoffeReservoirC1Ev
00008cf8 g     F .text	00000018 alt_dcache_flush_all
00008900 g     F .text	00000008 _ZN14SugarReservoir9getAmountEv
00008f4c g       *ABS*	00000000 __ram_rwdata_end
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory
00008620 g     F .text	00000008 _ZN10Controller13getWaterLevelEv
00008908 g     F .text	00000004 _ZN14WaterReservoirC1Ev
00008f48 g       *ABS*	00000000 __ram_rodata_end
00008ecc g     F .text	00000008 __umodsi3
000088d0 g     F .text	0000000c _ZN13MilkReservoirC1Ev
00008f9c g       *ABS*	00000000 end
00008ed4 g       *ABS*	00000000 __CTOR_LIST__
00010000 g       *ABS*	00000000 __alt_stack_pointer
00008c4c g     F .text	00000034 altera_avalon_jtag_uart_write
00008a68 g     F .text	00000170 alt_printf
00008f54 g     O .bss	00000001 selector
00008020 g     F .text	0000004c _start
000088ec g     F .text	0000000c _ZN14SugarReservoirC1Ev
00008c48 g     F .text	00000004 alt_sys_init
000088c8 g     F .text	00000008 _ZN14CoffeReservoir9getAmountEv
000082f4 g     F .text	00000040 _ZN10ControllerC2Ev
00008f48 g       *ABS*	00000000 __ram_rwdata_start
00008ed8 g       *ABS*	00000000 __ram_rodata_start
000084d0 g     F .text	00000150 _ZN10Controller4makeE10coffeTypesbb
00008c80 g     F .text	00000078 alt_busy_sleep
000087fc g     F .text	00000004 _ZN8SelectorC2Ev
00008f9c g       *ABS*	00000000 __alt_stack_base
00008f88 g     O .bss	00000014 controller
00008630 g     F .text	00000024 _ZN7DisplayC1Ev
00008920 g     F .text	00000014 _ZN14WaterReservoir7getTempEv
0000890c g     F .text	00000014 _ZN14WaterReservoir8getLevelEv
000086d0 g     F .text	00000008 _ZN7Display11setLedCoffeEi
00008f50 g       *ABS*	00000000 __bss_start
00008828 g     F .text	00000044 _ZN8Selector16getSelectedCoffeEv
0000806c g     F .text	00000258 main
00008f58 g     O .bss	00000004 alt_envp
00008628 g     F .text	00000008 _ZN10Controller12getWaterTempEv
0000872c g     F .text	00000038 _ZN7Display8showDoneEv
00008e18 g     F .text	00000050 __divsi3
00008ed8 g       *ABS*	00000000 __CTOR_END__
00008ed8 g       *ABS*	00000000 __flash_rodata_start
00008c28 g     F .text	00000020 alt_irq_init
000088d0 g     F .text	0000000c _ZN13MilkReservoirC2Ev
00008908 g     F .text	00000004 _ZN14WaterReservoirC2Ev
00008700 g     F .text	0000002c _ZN7Display13clearDisplaysEv
00008f60 g     O .bss	00000004 alt_argc
00008898 g     F .text	0000000c _ZN18ChocolateReservoirC1Ev
0000886c g     F .text	00000018 _ZN8Selector11isWithSugarEv
00008020 g       *ABS*	00000000 __ram_exceptions_start
000088f8 g     F .text	00000008 _ZN14SugarReservoir9setAmountEi
00008f4c g       *ABS*	00000000 _edata
000086c8 g     F .text	00000008 _ZN7Display10setLedCopoEi
00008f9c g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
00008400 g     F .text	000000d0 _ZN10Controller6refillE10coffeTypesb
00008334 g     F .text	000000cc _ZN10Controller14needToResupplyE10coffeTypesb
00008814 g     F .text	00000014 _ZN8Selector14isReporPressedEv
000086e8 g     F .text	00000008 _ZN7Display11setLedSugarEi
00008d64 g     F .text	00000008 altera_nios2_qsys_irq_init
00008e68 g     F .text	0000005c __modsi3
00010000 g       *ABS*	00000000 __alt_data_end
00008630 g     F .text	00000024 _ZN7DisplayC2Ev
000088ec g     F .text	0000000c _ZN14SugarReservoirC2Ev
0000801c g       .entry	00000000 _exit
00008bd8 g     F .text	0000004c alt_putchar
00008d58 g     F .text	0000000c alt_icache_flush_all
000087fc g     F .text	00000004 _ZN8SelectorC1Ev
00008d10 g     F .text	00000048 _do_ctors
0000879c g     F .text	00000060 _ZN7Display9clearLedsEv
00008934 g     F .text	00000104 alt_load
000086d8 g     F .text	00000008 _ZN7Display15setLedCoffeMilkEi



Disassembly of section .entry:

00008000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
    8000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
    8004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
    8008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
    800c:	00bffd16 	blt	zero,r2,8004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8014:	08600814 	ori	at,at,32800
    jmp r1
    8018:	0800683a 	jmp	at

0000801c <_exit>:
    801c:	00000000 	call	0 <__reset-0x8000>

Disassembly of section .text:

00008020 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
    8020:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
    8024:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
    8028:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
    802c:	00bffd16 	blt	zero,r2,8024 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8030:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
    8034:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
    8038:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    803c:	d683d214 	ori	gp,gp,3912
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8040:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8044:	10a3d414 	ori	r2,r2,36688

    movhi r3, %hi(__bss_end)
    8048:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    804c:	18e3e714 	ori	r3,r3,36764

    beq r2, r3, 1f
    8050:	10c00326 	beq	r2,r3,8060 <_start+0x40>

0:
    stw zero, (r2)
    8054:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8058:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    805c:	10fffd36 	bltu	r2,r3,8054 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8060:	00089340 	call	8934 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8064:	0008a380 	call	8a38 <alt_main>

00008068 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8068:	003fff06 	br	8068 <alt_after_alt_main>

0000806c <main>:

// Estado atual da maquina de estados
states state;

int main()
{
    806c:	defffb04 	addi	sp,sp,-20
    8070:	dcc00315 	stw	r19,12(sp)
    8074:	dc400115 	stw	r17,4(sp)
    8078:	dfc00415 	stw	ra,16(sp)
    807c:	dc800215 	stw	r18,8(sp)
    8080:	dc000015 	stw	r16,0(sp)
	bool withSugar = false;
	int cupSize = 0;
	int waterTemp = 0;
	int waterLevel = 0;

	state = st_SELECT;
    8084:	d0200215 	stw	zero,-32760(gp)
states state;

int main()
{
	coffeTypes selectedCoffe = T_NONE;
	bool withSugar = false;
    8088:	0023883a 	mov	r17,zero

		display.setLedSugar(selector.isWithSugar());


		// Maquina de estados iluminati
		switch(state)
    808c:	04c00074 	movhi	r19,1
    8090:	9ce05704 	addi	r19,r19,-32420
	state = st_SELECT;

	while(1)
	{
		// Sinalizacao do reversatorio de agua
		waterLevel = controller.getWaterLevel();
    8094:	01000074 	movhi	r4,1
    8098:	2123e204 	addi	r4,r4,-28792
    809c:	00086200 	call	8620 <_ZN10Controller13getWaterLevelEv>
		waterTemp = controller.getWaterTemp();
    80a0:	01000074 	movhi	r4,1
    80a4:	2123e204 	addi	r4,r4,-28792
	state = st_SELECT;

	while(1)
	{
		// Sinalizacao do reversatorio de agua
		waterLevel = controller.getWaterLevel();
    80a8:	1025883a 	mov	r18,r2
		waterTemp = controller.getWaterTemp();
    80ac:	00086280 	call	8628 <_ZN10Controller12getWaterTempEv>
		display.setLedWaterLevel(waterLevel);
    80b0:	01000074 	movhi	r4,1
    80b4:	2123d904 	addi	r4,r4,-28828
    80b8:	900b883a 	mov	r5,r18

	while(1)
	{
		// Sinalizacao do reversatorio de agua
		waterLevel = controller.getWaterLevel();
		waterTemp = controller.getWaterTemp();
    80bc:	1021883a 	mov	r16,r2
		display.setLedWaterLevel(waterLevel);
    80c0:	00086f00 	call	86f0 <_ZN7Display16setLedWaterLevelEi>
		display.setLedWaterTemp(waterTemp);
    80c4:	800b883a 	mov	r5,r16
    80c8:	01000074 	movhi	r4,1
    80cc:	2123d904 	addi	r4,r4,-28828
    80d0:	00086f80 	call	86f8 <_ZN7Display15setLedWaterTempEi>

		// Atualiza os LEDs
		selectedCoffe = selector.getSelectedCoffe();
    80d4:	d1200304 	addi	r4,gp,-32756
    80d8:	00088280 	call	8828 <_ZN8Selector16getSelectedCoffeEv>
		display.setLedCoffe(selectedCoffe == T_COFFE ? 1 : 0);
    80dc:	11400060 	cmpeqi	r5,r2,1
    80e0:	01000074 	movhi	r4,1
    80e4:	2123d904 	addi	r4,r4,-28828
		waterTemp = controller.getWaterTemp();
		display.setLedWaterLevel(waterLevel);
		display.setLedWaterTemp(waterTemp);

		// Atualiza os LEDs
		selectedCoffe = selector.getSelectedCoffe();
    80e8:	1021883a 	mov	r16,r2
		display.setLedCoffe(selectedCoffe == T_COFFE ? 1 : 0);
    80ec:	00086d00 	call	86d0 <_ZN7Display11setLedCoffeEi>
		display.setLedCoffeMilk(selectedCoffe == T_COFFEMILK ? 1 : 0);
    80f0:	01000074 	movhi	r4,1
    80f4:	2123d904 	addi	r4,r4,-28828
    80f8:	814000a0 	cmpeqi	r5,r16,2
    80fc:	00086d80 	call	86d8 <_ZN7Display15setLedCoffeMilkEi>
		display.setLedMocacchino(selectedCoffe == T_MOCACCHINO ? 1 : 0);
    8100:	814000e0 	cmpeqi	r5,r16,3
    8104:	01000074 	movhi	r4,1
    8108:	2123d904 	addi	r4,r4,-28828
    810c:	00086e00 	call	86e0 <_ZN7Display16setLedMocacchinoEi>

		cupSize = selector.getCupSize();
    8110:	d1200304 	addi	r4,gp,-32756
    8114:	00088840 	call	8884 <_ZN8Selector10getCupSizeEv>
		display.setLedCopo(cupSize);
    8118:	100b883a 	mov	r5,r2
    811c:	01000074 	movhi	r4,1
    8120:	2123d904 	addi	r4,r4,-28828
    8124:	00086c80 	call	86c8 <_ZN7Display10setLedCopoEi>

		display.setLedSugar(selector.isWithSugar());
    8128:	d1200304 	addi	r4,gp,-32756
    812c:	000886c0 	call	886c <_ZN8Selector11isWithSugarEv>
    8130:	11403fcc 	andi	r5,r2,255
    8134:	01000074 	movhi	r4,1
    8138:	2123d904 	addi	r4,r4,-28828
    813c:	00086e80 	call	86e8 <_ZN7Display11setLedSugarEi>


		// Maquina de estados iluminati
		switch(state)
    8140:	d0a00217 	ldw	r2,-32760(gp)
    8144:	00c00104 	movi	r3,4
    8148:	18bfd236 	bltu	r3,r2,8094 <main+0x28>
    814c:	100490ba 	slli	r2,r2,2
    8150:	14c5883a 	add	r2,r2,r19
    8154:	10800017 	ldw	r2,0(r2)
    8158:	1000683a 	jmp	r2
    815c:	00008170 	cmpltui	zero,zero,517
    8160:	000081a8 	cmpgeui	zero,zero,518
    8164:	000081e0 	cmpeqi	zero,zero,519
    8168:	0000823c 	xorhi	zero,zero,520
    816c:	00008298 	cmpnei	zero,zero,522
		{
			case st_SELECT:
				alt_printf("Estou na selecao\n");
    8170:	01000074 	movhi	r4,1
    8174:	2123b604 	addi	r4,r4,-28968
    8178:	0008a680 	call	8a68 <alt_printf>

				if(selector.isPrepararPressed())
    817c:	d1200304 	addi	r4,gp,-32756
    8180:	00088000 	call	8800 <_ZN8Selector17isPrepararPressedEv>
    8184:	10803fcc 	andi	r2,r2,255
    8188:	103fc226 	beq	r2,zero,8094 <main+0x28>
				{

					// Caso nao selecionou nenhum cafe, fica no st_SELECT
					if(selectedCoffe == T_NONE)
    818c:	8000011e 	bne	r16,zero,8194 <main+0x128>
    8190:	00004a06 	br	82bc <main+0x250>
					{
						state = st_SELECT;
					}
					else
					{
						withSugar = selector.isWithSugar();
    8194:	d1200304 	addi	r4,gp,-32756
    8198:	000886c0 	call	886c <_ZN8Selector11isWithSugarEv>
    819c:	1023883a 	mov	r17,r2
						state = st_CHECK_REFILL;
    81a0:	00800044 	movi	r2,1
    81a4:	00003a06 	br	8290 <main+0x224>
				}

			break;

			case st_CHECK_REFILL:
				alt_printf("Estou na check refill\n");
    81a8:	01000074 	movhi	r4,1
    81ac:	2123bb04 	addi	r4,r4,-28948
    81b0:	0008a680 	call	8a68 <alt_printf>
				if(!controller.needToResupply(selectedCoffe, withSugar))
    81b4:	01000074 	movhi	r4,1
    81b8:	2123e204 	addi	r4,r4,-28792
    81bc:	800b883a 	mov	r5,r16
    81c0:	89803fcc 	andi	r6,r17,255
    81c4:	00083340 	call	8334 <_ZN10Controller14needToResupplyE10coffeTypesb>
    81c8:	10803fcc 	andi	r2,r2,255
    81cc:	1000021e 	bne	r2,zero,81d8 <main+0x16c>
				{
					state = st_MAKE;
    81d0:	008000c4 	movi	r2,3
    81d4:	00002e06 	br	8290 <main+0x224>
				}
				else
				{
					state = st_NO_SUPPLIES;
    81d8:	00800084 	movi	r2,2
    81dc:	00002c06 	br	8290 <main+0x224>
				}

			break;

			case st_NO_SUPPLIES:
				alt_printf("Estou na st_NO_SUPPLIES\n");
    81e0:	01000074 	movhi	r4,1
    81e4:	2123c104 	addi	r4,r4,-28924
    81e8:	0008a680 	call	8a68 <alt_printf>
				display.setLedRepor(1);
    81ec:	04800044 	movi	r18,1
    81f0:	01000074 	movhi	r4,1
    81f4:	2123d904 	addi	r4,r4,-28828
    81f8:	900b883a 	mov	r5,r18
    81fc:	00086c00 	call	86c0 <_ZN7Display11setLedReporEi>
				if(selector.isReporPressed())
    8200:	d1200304 	addi	r4,gp,-32756
    8204:	00088140 	call	8814 <_ZN8Selector14isReporPressedEv>
    8208:	10803fcc 	andi	r2,r2,255
    820c:	103fa126 	beq	r2,zero,8094 <main+0x28>
				{
					controller.refill(selectedCoffe, withSugar);
    8210:	800b883a 	mov	r5,r16
    8214:	01000074 	movhi	r4,1
    8218:	2123e204 	addi	r4,r4,-28792
    821c:	89803fcc 	andi	r6,r17,255
    8220:	00084000 	call	8400 <_ZN10Controller6refillE10coffeTypesb>
					state = st_CHECK_REFILL;
					display.setLedRepor(0);
    8224:	01000074 	movhi	r4,1
    8228:	2123d904 	addi	r4,r4,-28828
    822c:	000b883a 	mov	r5,zero
				alt_printf("Estou na st_NO_SUPPLIES\n");
				display.setLedRepor(1);
				if(selector.isReporPressed())
				{
					controller.refill(selectedCoffe, withSugar);
					state = st_CHECK_REFILL;
    8230:	d4a00215 	stw	r18,-32760(gp)
					display.setLedRepor(0);
    8234:	00086c00 	call	86c0 <_ZN7Display11setLedReporEi>
    8238:	003f9606 	br	8094 <main+0x28>
				}

			break;

			case st_MAKE:
				alt_printf("Estou na st_MAKE\n");
    823c:	01000074 	movhi	r4,1
    8240:	2123c804 	addi	r4,r4,-28896
    8244:	0008a680 	call	8a68 <alt_printf>

				display.showWait();
    8248:	01000074 	movhi	r4,1
    824c:	2123d904 	addi	r4,r4,-28828
    8250:	00087640 	call	8764 <_ZN7Display8showWaitEv>

				// Inicia o preparo do cafe
				cupSize = selector.getCupSize();
    8254:	d1200304 	addi	r4,gp,-32756
    8258:	00088840 	call	8884 <_ZN8Selector10getCupSizeEv>
				controller.make(selectedCoffe, withSugar, cupSize);
    825c:	800b883a 	mov	r5,r16
    8260:	89803fcc 	andi	r6,r17,255
    8264:	100ec03a 	cmpne	r7,r2,zero
    8268:	01000074 	movhi	r4,1
    826c:	2123e204 	addi	r4,r4,-28792
    8270:	00084d00 	call	84d0 <_ZN10Controller4makeE10coffeTypesbb>

				display.showDone();
    8274:	01000074 	movhi	r4,1
    8278:	2123d904 	addi	r4,r4,-28828
    827c:	000872c0 	call	872c <_ZN7Display8showDoneEv>
				usleep(5000000);
    8280:	01001334 	movhi	r4,76
    8284:	2112d004 	addi	r4,r4,19264
    8288:	0008c240 	call	8c24 <usleep>

				state = st_RESET;
    828c:	00800104 	movi	r2,4
    8290:	d0a00215 	stw	r2,-32760(gp)

			break;
    8294:	003f7f06 	br	8094 <main+0x28>

			case st_RESET:
				alt_printf("Estou na st_RESET\n");
    8298:	01000074 	movhi	r4,1
    829c:	2123cd04 	addi	r4,r4,-28876
    82a0:	0008a680 	call	8a68 <alt_printf>
				// Reseta os LEDs
				display.clearLeds();
    82a4:	01000074 	movhi	r4,1
    82a8:	2123d904 	addi	r4,r4,-28828
    82ac:	000879c0 	call	879c <_ZN7Display9clearLedsEv>

				// Reseta os displays
				display.clearDisplays();
    82b0:	01000074 	movhi	r4,1
    82b4:	2123d904 	addi	r4,r4,-28828
    82b8:	00087000 	call	8700 <_ZN7Display13clearDisplaysEv>

				state = st_SELECT;
    82bc:	d0200215 	stw	zero,-32760(gp)
			break;
    82c0:	003f7406 	br	8094 <main+0x28>

000082c4 <_GLOBAL__sub_I_controller>:
		}
	}

  return 0;
}
    82c4:	deffff04 	addi	sp,sp,-4
 * 5: Nivel da agua
 * 6: Temperatura da agua
 */

// Instancias dos componentes
Controller controller;
    82c8:	01000074 	movhi	r4,1
    82cc:	2123e204 	addi	r4,r4,-28792
			break;
		}
	}

  return 0;
}
    82d0:	dfc00015 	stw	ra,0(sp)
 * 5: Nivel da agua
 * 6: Temperatura da agua
 */

// Instancias dos componentes
Controller controller;
    82d4:	00082f40 	call	82f4 <_ZN10ControllerC1Ev>
Display display;
    82d8:	01000074 	movhi	r4,1
    82dc:	2123d904 	addi	r4,r4,-28828
    82e0:	00086300 	call	8630 <_ZN7DisplayC1Ev>
Selector selector;
    82e4:	d1200304 	addi	r4,gp,-32756
			break;
		}
	}

  return 0;
}
    82e8:	dfc00017 	ldw	ra,0(sp)
    82ec:	dec00104 	addi	sp,sp,4
 */

// Instancias dos componentes
Controller controller;
Display display;
Selector selector;
    82f0:	00087fc1 	jmpi	87fc <_ZN8SelectorC1Ev>

000082f4 <_ZN10ControllerC1Ev>:
#include "Controller.h"

Controller::Controller(){
    82f4:	defffe04 	addi	sp,sp,-8
    82f8:	dfc00115 	stw	ra,4(sp)
    82fc:	dc000015 	stw	r16,0(sp)
    8300:	2021883a 	mov	r16,r4
    8304:	00088b40 	call	88b4 <_ZN14CoffeReservoirC1Ev>
    8308:	81000104 	addi	r4,r16,4
    830c:	00088d00 	call	88d0 <_ZN13MilkReservoirC1Ev>
    8310:	81000204 	addi	r4,r16,8
    8314:	00088980 	call	8898 <_ZN18ChocolateReservoirC1Ev>
    8318:	81000304 	addi	r4,r16,12
    831c:	00088ec0 	call	88ec <_ZN14SugarReservoirC1Ev>
    8320:	81000404 	addi	r4,r16,16

}
    8324:	dfc00117 	ldw	ra,4(sp)
    8328:	dc000017 	ldw	r16,0(sp)
    832c:	dec00204 	addi	sp,sp,8
#include "Controller.h"

Controller::Controller(){
    8330:	00089081 	jmpi	8908 <_ZN14WaterReservoirC1Ev>

00008334 <_ZN10Controller14needToResupplyE10coffeTypesb>:

}

bool Controller::needToResupply(coffeTypes coffeType, bool isWithSugar)
{
    8334:	defffd04 	addi	sp,sp,-12
    8338:	dc400115 	stw	r17,4(sp)
    833c:	dc000015 	stw	r16,0(sp)
    8340:	dfc00215 	stw	ra,8(sp)
	if(isWithSugar && sugarReservoir.getAmount() == 0)
    8344:	31803fcc 	andi	r6,r6,255
Controller::Controller(){

}

bool Controller::needToResupply(coffeTypes coffeType, bool isWithSugar)
{
    8348:	2021883a 	mov	r16,r4
    834c:	2823883a 	mov	r17,r5
	if(isWithSugar && sugarReservoir.getAmount() == 0)
    8350:	30001b26 	beq	r6,zero,83c0 <_ZN10Controller14needToResupplyE10coffeTypesb+0x8c>
    8354:	21000304 	addi	r4,r4,12
    8358:	00089000 	call	8900 <_ZN14SugarReservoir9getAmountEv>
    835c:	10002226 	beq	r2,zero,83e8 <_ZN10Controller14needToResupplyE10coffeTypesb+0xb4>
    8360:	00001706 	br	83c0 <_ZN10Controller14needToResupplyE10coffeTypesb+0x8c>
	}

	switch(coffeType)
	{
		case T_COFFE:
			if(coffeReservoir.getAmount() == 0)
    8364:	8009883a 	mov	r4,r16
    8368:	00088c80 	call	88c8 <_ZN14CoffeReservoir9getAmountEv>
    836c:	1005003a 	cmpeq	r2,r2,zero
    8370:	00001e06 	br	83ec <_ZN10Controller14needToResupplyE10coffeTypesb+0xb8>
			else
				return false;
		break;

		case T_COFFEMILK:
			if(coffeReservoir.getAmount() == 0 ||
    8374:	8009883a 	mov	r4,r16
    8378:	00088c80 	call	88c8 <_ZN14CoffeReservoir9getAmountEv>
    837c:	10001a26 	beq	r2,zero,83e8 <_ZN10Controller14needToResupplyE10coffeTypesb+0xb4>
					milkReservoir.getAmount() == 0)
    8380:	81000104 	addi	r4,r16,4
    8384:	00088e40 	call	88e4 <_ZN13MilkReservoir9getAmountEv>
			else
				return false;
		break;

		case T_COFFEMILK:
			if(coffeReservoir.getAmount() == 0 ||
    8388:	10001726 	beq	r2,zero,83e8 <_ZN10Controller14needToResupplyE10coffeTypesb+0xb4>
    838c:	00000a06 	br	83b8 <_ZN10Controller14needToResupplyE10coffeTypesb+0x84>
			else
				return false;
		break;

		case T_MOCACCHINO:
			if(coffeReservoir.getAmount() == 0 ||
    8390:	8009883a 	mov	r4,r16
    8394:	00088c80 	call	88c8 <_ZN14CoffeReservoir9getAmountEv>
    8398:	10001326 	beq	r2,zero,83e8 <_ZN10Controller14needToResupplyE10coffeTypesb+0xb4>
					milkReservoir.getAmount() == 0 ||
    839c:	81000104 	addi	r4,r16,4
    83a0:	00088e40 	call	88e4 <_ZN13MilkReservoir9getAmountEv>
			else
				return false;
		break;

		case T_MOCACCHINO:
			if(coffeReservoir.getAmount() == 0 ||
    83a4:	10001026 	beq	r2,zero,83e8 <_ZN10Controller14needToResupplyE10coffeTypesb+0xb4>
					milkReservoir.getAmount() == 0 ||
					chocolateReservoir.getAmount() == 0)
    83a8:	81000204 	addi	r4,r16,8
    83ac:	00088ac0 	call	88ac <_ZN18ChocolateReservoir9getAmountEv>
    83b0:	003ff506 	br	8388 <_ZN10Controller14needToResupplyE10coffeTypesb+0x54>
    83b4:	00000d06 	br	83ec <_ZN10Controller14needToResupplyE10coffeTypesb+0xb8>
			else
				return false;
		break;

		case T_NONE:
			return false;
    83b8:	0005883a 	mov	r2,zero
    83bc:	00000b06 	br	83ec <_ZN10Controller14needToResupplyE10coffeTypesb+0xb8>
	if(isWithSugar && sugarReservoir.getAmount() == 0)
	{
		return true;
	}

	switch(coffeType)
    83c0:	00800044 	movi	r2,1
    83c4:	88bfe726 	beq	r17,r2,8364 <_ZN10Controller14needToResupplyE10coffeTypesb+0x30>
    83c8:	14400216 	blt	r2,r17,83d4 <_ZN10Controller14needToResupplyE10coffeTypesb+0xa0>
    83cc:	883ffa26 	beq	r17,zero,83b8 <_ZN10Controller14needToResupplyE10coffeTypesb+0x84>
    83d0:	003ff806 	br	83b4 <_ZN10Controller14needToResupplyE10coffeTypesb+0x80>
    83d4:	00800084 	movi	r2,2
    83d8:	88bfe626 	beq	r17,r2,8374 <_ZN10Controller14needToResupplyE10coffeTypesb+0x40>
    83dc:	008000c4 	movi	r2,3
    83e0:	88bff41e 	bne	r17,r2,83b4 <_ZN10Controller14needToResupplyE10coffeTypesb+0x80>
    83e4:	003fea06 	br	8390 <_ZN10Controller14needToResupplyE10coffeTypesb+0x5c>
		break;

		case T_COFFEMILK:
			if(coffeReservoir.getAmount() == 0 ||
					milkReservoir.getAmount() == 0)
				return true;
    83e8:	00800044 	movi	r2,1

		case T_NONE:
			return false;
			break;
	}
}
    83ec:	dfc00217 	ldw	ra,8(sp)
    83f0:	dc400117 	ldw	r17,4(sp)
    83f4:	dc000017 	ldw	r16,0(sp)
    83f8:	dec00304 	addi	sp,sp,12
    83fc:	f800283a 	ret

00008400 <_ZN10Controller6refillE10coffeTypesb>:

void Controller::refill(coffeTypes coffeType, bool isWithSugar)
{
    8400:	defffd04 	addi	sp,sp,-12
    8404:	dc400115 	stw	r17,4(sp)
    8408:	dc000015 	stw	r16,0(sp)
    840c:	dfc00215 	stw	ra,8(sp)
	if(isWithSugar)
    8410:	31803fcc 	andi	r6,r6,255
			break;
	}
}

void Controller::refill(coffeTypes coffeType, bool isWithSugar)
{
    8414:	2021883a 	mov	r16,r4
    8418:	2823883a 	mov	r17,r5
	if(isWithSugar)
    841c:	30000326 	beq	r6,zero,842c <_ZN10Controller6refillE10coffeTypesb+0x2c>
	{
		sugarReservoir.setAmount(10);
    8420:	21000304 	addi	r4,r4,12
    8424:	01400284 	movi	r5,10
    8428:	00088f80 	call	88f8 <_ZN14SugarReservoir9setAmountEi>
	}

	switch(coffeType)
    842c:	00800084 	movi	r2,2
    8430:	88800b26 	beq	r17,r2,8460 <_ZN10Controller6refillE10coffeTypesb+0x60>
    8434:	008000c4 	movi	r2,3
    8438:	88801326 	beq	r17,r2,8488 <_ZN10Controller6refillE10coffeTypesb+0x88>
    843c:	00800044 	movi	r2,1
    8440:	88801e1e 	bne	r17,r2,84bc <_ZN10Controller6refillE10coffeTypesb+0xbc>
	{
		case T_COFFE:
			coffeReservoir.setAmount(10);
    8444:	8009883a 	mov	r4,r16
    8448:	01400284 	movi	r5,10
		break;

		case T_NONE:
			break;
	}
}
    844c:	dfc00217 	ldw	ra,8(sp)
    8450:	dc400117 	ldw	r17,4(sp)
    8454:	dc000017 	ldw	r16,0(sp)
    8458:	dec00304 	addi	sp,sp,12
	}

	switch(coffeType)
	{
		case T_COFFE:
			coffeReservoir.setAmount(10);
    845c:	00088c01 	jmpi	88c0 <_ZN14CoffeReservoir9setAmountEi>
		break;

		case T_COFFEMILK:
			coffeReservoir.setAmount(10);
    8460:	8009883a 	mov	r4,r16
    8464:	01400284 	movi	r5,10
    8468:	00088c00 	call	88c0 <_ZN14CoffeReservoir9setAmountEi>
			milkReservoir.setAmount(10);
    846c:	81000104 	addi	r4,r16,4
    8470:	01400284 	movi	r5,10
		break;

		case T_NONE:
			break;
	}
}
    8474:	dfc00217 	ldw	ra,8(sp)
    8478:	dc400117 	ldw	r17,4(sp)
    847c:	dc000017 	ldw	r16,0(sp)
    8480:	dec00304 	addi	sp,sp,12
			coffeReservoir.setAmount(10);
		break;

		case T_COFFEMILK:
			coffeReservoir.setAmount(10);
			milkReservoir.setAmount(10);
    8484:	00088dc1 	jmpi	88dc <_ZN13MilkReservoir9setAmountEi>
		break;

		case T_MOCACCHINO:
			coffeReservoir.setAmount(10);
    8488:	8009883a 	mov	r4,r16
    848c:	01400284 	movi	r5,10
    8490:	00088c00 	call	88c0 <_ZN14CoffeReservoir9setAmountEi>
			milkReservoir.setAmount(10);
    8494:	81000104 	addi	r4,r16,4
    8498:	01400284 	movi	r5,10
    849c:	00088dc0 	call	88dc <_ZN13MilkReservoir9setAmountEi>
			chocolateReservoir.setAmount(10);
    84a0:	81000204 	addi	r4,r16,8
    84a4:	01400284 	movi	r5,10
		break;

		case T_NONE:
			break;
	}
}
    84a8:	dfc00217 	ldw	ra,8(sp)
    84ac:	dc400117 	ldw	r17,4(sp)
    84b0:	dc000017 	ldw	r16,0(sp)
    84b4:	dec00304 	addi	sp,sp,12
		break;

		case T_MOCACCHINO:
			coffeReservoir.setAmount(10);
			milkReservoir.setAmount(10);
			chocolateReservoir.setAmount(10);
    84b8:	00088a41 	jmpi	88a4 <_ZN18ChocolateReservoir9setAmountEi>
		break;

		case T_NONE:
			break;
	}
}
    84bc:	dfc00217 	ldw	ra,8(sp)
    84c0:	dc400117 	ldw	r17,4(sp)
    84c4:	dc000017 	ldw	r16,0(sp)
    84c8:	dec00304 	addi	sp,sp,12
    84cc:	f800283a 	ret

000084d0 <_ZN10Controller4makeE10coffeTypesbb>:

void Controller::make(coffeTypes coffeType, bool isWithSugar, bool cupSize)
{
    84d0:	defffb04 	addi	sp,sp,-20
    84d4:	dcc00315 	stw	r19,12(sp)
    84d8:	dc800215 	stw	r18,8(sp)
    84dc:	dc000015 	stw	r16,0(sp)
    84e0:	dfc00415 	stw	ra,16(sp)
    84e4:	dc400115 	stw	r17,4(sp)
	int wait_time = 0;

	if(isWithSugar)
    84e8:	31803fcc 	andi	r6,r6,255
			break;
	}
}

void Controller::make(coffeTypes coffeType, bool isWithSugar, bool cupSize)
{
    84ec:	2021883a 	mov	r16,r4
    84f0:	2825883a 	mov	r18,r5
    84f4:	3827883a 	mov	r19,r7
	int wait_time = 0;

	if(isWithSugar)
    84f8:	30000926 	beq	r6,zero,8520 <_ZN10Controller4makeE10coffeTypesbb+0x50>
	{
		sugarReservoir.setAmount(sugarReservoir.getAmount() - 1);
    84fc:	24400304 	addi	r17,r4,12
    8500:	8809883a 	mov	r4,r17
    8504:	00089000 	call	8900 <_ZN14SugarReservoir9getAmountEv>
    8508:	8809883a 	mov	r4,r17
    850c:	117fffc4 	addi	r5,r2,-1
    8510:	00088f80 	call	88f8 <_ZN14SugarReservoir9setAmountEi>
		wait_time += 1000000;
    8514:	044003f4 	movhi	r17,15
    8518:	8c509004 	addi	r17,r17,16960
    851c:	00000106 	br	8524 <_ZN10Controller4makeE10coffeTypesbb+0x54>
	}
}

void Controller::make(coffeTypes coffeType, bool isWithSugar, bool cupSize)
{
	int wait_time = 0;
    8520:	0023883a 	mov	r17,zero
	{
		sugarReservoir.setAmount(sugarReservoir.getAmount() - 1);
		wait_time += 1000000;
	}

	switch(coffeType)
    8524:	00800084 	movi	r2,2
    8528:	90800c26 	beq	r18,r2,855c <_ZN10Controller4makeE10coffeTypesbb+0x8c>
    852c:	008000c4 	movi	r2,3
    8530:	90801826 	beq	r18,r2,8594 <_ZN10Controller4makeE10coffeTypesbb+0xc4>
    8534:	00800044 	movi	r2,1
    8538:	90802a1e 	bne	r18,r2,85e4 <_ZN10Controller4makeE10coffeTypesbb+0x114>
	{
		case T_COFFE:
			coffeReservoir.setAmount(coffeReservoir.getAmount() - 1);
    853c:	8009883a 	mov	r4,r16
    8540:	00088c80 	call	88c8 <_ZN14CoffeReservoir9getAmountEv>
    8544:	117fffc4 	addi	r5,r2,-1
    8548:	8009883a 	mov	r4,r16
    854c:	00088c00 	call	88c0 <_ZN14CoffeReservoir9setAmountEi>
			wait_time += 1000000;
    8550:	008003f4 	movhi	r2,15
    8554:	10909004 	addi	r2,r2,16960
    8558:	00002106 	br	85e0 <_ZN10Controller4makeE10coffeTypesbb+0x110>
		break;

		case T_COFFEMILK:
			coffeReservoir.setAmount(coffeReservoir.getAmount() - 1);
    855c:	8009883a 	mov	r4,r16
    8560:	00088c80 	call	88c8 <_ZN14CoffeReservoir9getAmountEv>
    8564:	8009883a 	mov	r4,r16
    8568:	117fffc4 	addi	r5,r2,-1
    856c:	00088c00 	call	88c0 <_ZN14CoffeReservoir9setAmountEi>
			milkReservoir.setAmount(milkReservoir.getAmount() - 1);
    8570:	84000104 	addi	r16,r16,4
    8574:	8009883a 	mov	r4,r16
    8578:	00088e40 	call	88e4 <_ZN13MilkReservoir9getAmountEv>
    857c:	117fffc4 	addi	r5,r2,-1
    8580:	8009883a 	mov	r4,r16
    8584:	00088dc0 	call	88dc <_ZN13MilkReservoir9setAmountEi>
			wait_time += 2000000;
    8588:	008007f4 	movhi	r2,31
    858c:	10a12004 	addi	r2,r2,-31616
    8590:	00001306 	br	85e0 <_ZN10Controller4makeE10coffeTypesbb+0x110>
		break;

		case T_MOCACCHINO:
			coffeReservoir.setAmount(coffeReservoir.getAmount() - 1);
    8594:	8009883a 	mov	r4,r16
    8598:	00088c80 	call	88c8 <_ZN14CoffeReservoir9getAmountEv>
    859c:	8009883a 	mov	r4,r16
    85a0:	117fffc4 	addi	r5,r2,-1
    85a4:	00088c00 	call	88c0 <_ZN14CoffeReservoir9setAmountEi>
			milkReservoir.setAmount(milkReservoir.getAmount() - 1);
    85a8:	84800104 	addi	r18,r16,4
    85ac:	9009883a 	mov	r4,r18
    85b0:	00088e40 	call	88e4 <_ZN13MilkReservoir9getAmountEv>
    85b4:	117fffc4 	addi	r5,r2,-1
    85b8:	9009883a 	mov	r4,r18
    85bc:	00088dc0 	call	88dc <_ZN13MilkReservoir9setAmountEi>
			chocolateReservoir.setAmount(chocolateReservoir.getAmount() - 1);
    85c0:	84000204 	addi	r16,r16,8
    85c4:	8009883a 	mov	r4,r16
    85c8:	00088ac0 	call	88ac <_ZN18ChocolateReservoir9getAmountEv>
    85cc:	117fffc4 	addi	r5,r2,-1
    85d0:	8009883a 	mov	r4,r16
    85d4:	00088a40 	call	88a4 <_ZN18ChocolateReservoir9setAmountEi>
			wait_time += 3000000;
    85d8:	00800bb4 	movhi	r2,46
    85dc:	10b1b004 	addi	r2,r2,-14656
    85e0:	88a3883a 	add	r17,r17,r2

		case T_NONE:
			break;
	}

	if(cupSize)
    85e4:	9cc03fcc 	andi	r19,r19,255
    85e8:	98000326 	beq	r19,zero,85f8 <_ZN10Controller4makeE10coffeTypesbb+0x128>
	{
		wait_time += 10000000;
    85ec:	01002674 	movhi	r4,153
    85f0:	2125a004 	addi	r4,r4,-27008
    85f4:	00000206 	br	8600 <_ZN10Controller4makeE10coffeTypesbb+0x130>
	}
	else
	{
		wait_time += 5000000;
    85f8:	01001334 	movhi	r4,76
    85fc:	2112d004 	addi	r4,r4,19264
    8600:	8909883a 	add	r4,r17,r4
	}

	usleep(wait_time);

}
    8604:	dfc00417 	ldw	ra,16(sp)
    8608:	dcc00317 	ldw	r19,12(sp)
    860c:	dc800217 	ldw	r18,8(sp)
    8610:	dc400117 	ldw	r17,4(sp)
    8614:	dc000017 	ldw	r16,0(sp)
    8618:	dec00504 	addi	sp,sp,20
	else
	{
		wait_time += 5000000;
	}

	usleep(wait_time);
    861c:	0008c241 	jmpi	8c24 <usleep>

00008620 <_ZN10Controller13getWaterLevelEv>:

}

int Controller::getWaterLevel()
{
	return this->waterReservoir.getLevel();
    8620:	21000404 	addi	r4,r4,16
    8624:	000890c1 	jmpi	890c <_ZN14WaterReservoir8getLevelEv>

00008628 <_ZN10Controller12getWaterTempEv>:
}

int Controller::getWaterTemp()
{
	return this->waterReservoir.getTemp();
    8628:	21000404 	addi	r4,r4,16
    862c:	00089201 	jmpi	8920 <_ZN14WaterReservoir7getTempEv>

00008630 <_ZN7DisplayC1Ev>:
#include "Display.h"

Display::Display(){

	this->_ledCopo = 0;
    8630:	20000115 	stw	zero,4(r4)
	this->_ledRepor = 0;
    8634:	20000015 	stw	zero,0(r4)
	this->_ledCoffe = 0;
    8638:	20000215 	stw	zero,8(r4)
	this->_ledCoffeMilk = 0;
    863c:	20000315 	stw	zero,12(r4)
	this->_ledMocacchino = 0;
    8640:	20000415 	stw	zero,16(r4)
	this->_ledSugar = 0;
    8644:	20000515 	stw	zero,20(r4)
	this->_ledWaterLevel = 0;
    8648:	20000615 	stw	zero,24(r4)
	this->_ledWaterTemp = 0;
    864c:	20000715 	stw	zero,28(r4)
    8650:	f800283a 	ret

00008654 <_ZN7Display11refreshLedsEv>:

void Display::refreshLeds()
{
	int soma = 0;

	if(this->_ledCopo)
    8654:	20800117 	ldw	r2,4(r4)
	{
		soma = soma + 1;
	}

	if(this->_ledRepor)
    8658:	20c00017 	ldw	r3,0(r4)

void Display::refreshLeds()
{
	int soma = 0;

	if(this->_ledCopo)
    865c:	1004c03a 	cmpne	r2,r2,zero
	{
		soma = soma + 1;
	}

	if(this->_ledRepor)
    8660:	18000126 	beq	r3,zero,8668 <_ZN7Display11refreshLedsEv+0x14>
	{
		soma = soma +  2;
    8664:	10800084 	addi	r2,r2,2
	}

	if(this->_ledCoffe)
    8668:	20c00217 	ldw	r3,8(r4)
    866c:	18000126 	beq	r3,zero,8674 <_ZN7Display11refreshLedsEv+0x20>
	{
		soma = soma +  4;
    8670:	10800104 	addi	r2,r2,4
	}

	if(this->_ledCoffeMilk)
    8674:	20c00317 	ldw	r3,12(r4)
    8678:	18000126 	beq	r3,zero,8680 <_ZN7Display11refreshLedsEv+0x2c>
	{
		soma = soma +  8;
    867c:	10800204 	addi	r2,r2,8
	}

	if(this->_ledMocacchino)
    8680:	20c00417 	ldw	r3,16(r4)
    8684:	18000126 	beq	r3,zero,868c <_ZN7Display11refreshLedsEv+0x38>
	{
		soma = soma +  16;
    8688:	10800404 	addi	r2,r2,16
	}

	if(this->_ledSugar)
    868c:	20c00517 	ldw	r3,20(r4)
    8690:	18000126 	beq	r3,zero,8698 <_ZN7Display11refreshLedsEv+0x44>
	{
		soma = soma + 32;
    8694:	10800804 	addi	r2,r2,32
	}

	if(this->_ledWaterLevel)
    8698:	20c00617 	ldw	r3,24(r4)
    869c:	18000126 	beq	r3,zero,86a4 <_ZN7Display11refreshLedsEv+0x50>
	{
		soma = soma +  64;
    86a0:	10801004 	addi	r2,r2,64
	}

	if(this->_ledWaterTemp)
    86a4:	20c00717 	ldw	r3,28(r4)
    86a8:	18000126 	beq	r3,zero,86b0 <_ZN7Display11refreshLedsEv+0x5c>
	{
		soma = soma +  128;
    86ac:	10802004 	addi	r2,r2,128
	}

	IOWR(LED_BASE,0, soma);
    86b0:	00c00074 	movhi	r3,1
    86b4:	18c41c04 	addi	r3,r3,4208
    86b8:	18800035 	stwio	r2,0(r3)
    86bc:	f800283a 	ret

000086c0 <_ZN7Display11setLedReporEi>:
}

void Display::setLedRepor(int status)
{
	this->_ledRepor = status;
    86c0:	21400015 	stw	r5,0(r4)
	this->refreshLeds();
    86c4:	00086541 	jmpi	8654 <_ZN7Display11refreshLedsEv>

000086c8 <_ZN7Display10setLedCopoEi>:
}

void Display::setLedCopo(int status)
{
	this->_ledCopo = status;
    86c8:	21400115 	stw	r5,4(r4)
	this->refreshLeds();
    86cc:	00086541 	jmpi	8654 <_ZN7Display11refreshLedsEv>

000086d0 <_ZN7Display11setLedCoffeEi>:
}

void Display::setLedCoffe(int status)
{
	this->_ledCoffe = status;
    86d0:	21400215 	stw	r5,8(r4)
	this->refreshLeds();
    86d4:	00086541 	jmpi	8654 <_ZN7Display11refreshLedsEv>

000086d8 <_ZN7Display15setLedCoffeMilkEi>:
}

void Display::setLedCoffeMilk(int status)
{
	this->_ledCoffeMilk = status;
    86d8:	21400315 	stw	r5,12(r4)
	this->refreshLeds();
    86dc:	00086541 	jmpi	8654 <_ZN7Display11refreshLedsEv>

000086e0 <_ZN7Display16setLedMocacchinoEi>:
}

void Display::setLedMocacchino(int status)
{
	this->_ledMocacchino = status;
    86e0:	21400415 	stw	r5,16(r4)
	this->refreshLeds();
    86e4:	00086541 	jmpi	8654 <_ZN7Display11refreshLedsEv>

000086e8 <_ZN7Display11setLedSugarEi>:
}

void Display::setLedSugar(int status)
{
	this->_ledSugar = status;
    86e8:	21400515 	stw	r5,20(r4)
	this->refreshLeds();
    86ec:	00086541 	jmpi	8654 <_ZN7Display11refreshLedsEv>

000086f0 <_ZN7Display16setLedWaterLevelEi>:
}

void Display::setLedWaterLevel(int status)
{
	this->_ledWaterLevel = status;
    86f0:	21400615 	stw	r5,24(r4)
	this->refreshLeds();
    86f4:	00086541 	jmpi	8654 <_ZN7Display11refreshLedsEv>

000086f8 <_ZN7Display15setLedWaterTempEi>:
}

void Display::setLedWaterTemp(int status)
{
	this->_ledWaterTemp = status;
    86f8:	21400715 	stw	r5,28(r4)
	this->refreshLeds();
    86fc:	00086541 	jmpi	8654 <_ZN7Display11refreshLedsEv>

00008700 <_ZN7Display13clearDisplaysEv>:
}

void Display::clearDisplays()
{
	IOWR(HEX0_BASE,0,127);
    8700:	00801fc4 	movi	r2,127
    8704:	00c00074 	movhi	r3,1
    8708:	18c41404 	addi	r3,r3,4176
    870c:	18800035 	stwio	r2,0(r3)
	IOWR(HEX1_BASE,0,127);
    8710:	18fffc04 	addi	r3,r3,-16
    8714:	18800035 	stwio	r2,0(r3)
	IOWR(HEX2_BASE,0,127);
    8718:	18fffc04 	addi	r3,r3,-16
    871c:	18800035 	stwio	r2,0(r3)
	IOWR(HEX3_BASE,0,127);
    8720:	18fffc04 	addi	r3,r3,-16
    8724:	18800035 	stwio	r2,0(r3)
    8728:	f800283a 	ret

0000872c <_ZN7Display8showDoneEv>:
}

void Display::showDone()
{
	IOWR(HEX0_BASE,0,6);		// 0000110 --> e
    872c:	00800074 	movhi	r2,1
    8730:	10841404 	addi	r2,r2,4176
    8734:	00c00184 	movi	r3,6
    8738:	10c00035 	stwio	r3,0(r2)
	IOWR(HEX1_BASE,0,43);	 	// 0101011 --> n
    873c:	10bffc04 	addi	r2,r2,-16
    8740:	00c00ac4 	movi	r3,43
    8744:	10c00035 	stwio	r3,0(r2)
	IOWR(HEX2_BASE,0,35);  		// 0100011 --> o
    8748:	10bffc04 	addi	r2,r2,-16
    874c:	00c008c4 	movi	r3,35
    8750:	10c00035 	stwio	r3,0(r2)
	IOWR(HEX3_BASE,0,33);		// 0100001 --> d
    8754:	10bffc04 	addi	r2,r2,-16
    8758:	00c00844 	movi	r3,33
    875c:	10c00035 	stwio	r3,0(r2)
    8760:	f800283a 	ret

00008764 <_ZN7Display8showWaitEv>:
}

void Display::showWait()
{
	IOWR(HEX0_BASE,0,78);  		// 1001110 --> t
    8764:	00800074 	movhi	r2,1
    8768:	10841404 	addi	r2,r2,4176
    876c:	00c01384 	movi	r3,78
    8770:	10c00035 	stwio	r3,0(r2)
	IOWR(HEX1_BASE,0,121); 		// 1111001 --> i
    8774:	10bffc04 	addi	r2,r2,-16
    8778:	00c01e44 	movi	r3,121
    877c:	10c00035 	stwio	r3,0(r2)
	IOWR(HEX2_BASE,0,8);   		// 0001000 --> a
    8780:	10bffc04 	addi	r2,r2,-16
    8784:	00c00204 	movi	r3,8
    8788:	10c00035 	stwio	r3,0(r2)
	IOWR(HEX3_BASE,0,99);	 	// 1100011 --> w
    878c:	10bffc04 	addi	r2,r2,-16
    8790:	00c018c4 	movi	r3,99
    8794:	10c00035 	stwio	r3,0(r2)
    8798:	f800283a 	ret

0000879c <_ZN7Display9clearLedsEv>:
}

void Display::clearLeds()
{
    879c:	defffe04 	addi	sp,sp,-8
    87a0:	dfc00115 	stw	ra,4(sp)
    87a4:	dc000015 	stw	r16,0(sp)
	this->refreshLeds();
}

void Display::setLedCoffe(int status)
{
	this->_ledCoffe = status;
    87a8:	20000215 	stw	zero,8(r4)
	IOWR(HEX2_BASE,0,8);   		// 0001000 --> a
	IOWR(HEX3_BASE,0,99);	 	// 1100011 --> w
}

void Display::clearLeds()
{
    87ac:	2021883a 	mov	r16,r4
}

void Display::setLedCoffe(int status)
{
	this->_ledCoffe = status;
	this->refreshLeds();
    87b0:	00086540 	call	8654 <_ZN7Display11refreshLedsEv>
}

void Display::setLedCoffeMilk(int status)
{
	this->_ledCoffeMilk = status;
	this->refreshLeds();
    87b4:	8009883a 	mov	r4,r16
	this->refreshLeds();
}

void Display::setLedCoffeMilk(int status)
{
	this->_ledCoffeMilk = status;
    87b8:	80000315 	stw	zero,12(r16)
	this->refreshLeds();
    87bc:	00086540 	call	8654 <_ZN7Display11refreshLedsEv>
}

void Display::setLedCopo(int status)
{
	this->_ledCopo = status;
	this->refreshLeds();
    87c0:	8009883a 	mov	r4,r16
	this->refreshLeds();
}

void Display::setLedCopo(int status)
{
	this->_ledCopo = status;
    87c4:	80000115 	stw	zero,4(r16)
	this->refreshLeds();
    87c8:	00086540 	call	8654 <_ZN7Display11refreshLedsEv>
}

void Display::setLedMocacchino(int status)
{
	this->_ledMocacchino = status;
	this->refreshLeds();
    87cc:	8009883a 	mov	r4,r16
	this->refreshLeds();
}

void Display::setLedMocacchino(int status)
{
	this->_ledMocacchino = status;
    87d0:	80000415 	stw	zero,16(r16)
	this->refreshLeds();
    87d4:	00086540 	call	8654 <_ZN7Display11refreshLedsEv>
}

void Display::setLedRepor(int status)
{
	this->_ledRepor = status;
	this->refreshLeds();
    87d8:	8009883a 	mov	r4,r16
	IOWR(LED_BASE,0, soma);
}

void Display::setLedRepor(int status)
{
	this->_ledRepor = status;
    87dc:	80000015 	stw	zero,0(r16)
	this->refreshLeds();
    87e0:	00086540 	call	8654 <_ZN7Display11refreshLedsEv>
}

void Display::setLedCoffe(int status)
{
	this->_ledCoffe = status;
	this->refreshLeds();
    87e4:	8009883a 	mov	r4,r16
	this->refreshLeds();
}

void Display::setLedCoffe(int status)
{
	this->_ledCoffe = status;
    87e8:	80000215 	stw	zero,8(r16)
	this->setLedCoffeMilk(0);
	this->setLedCopo(0);
	this->setLedMocacchino(0);
	this->setLedRepor(0);
	this->setLedCoffe(0);
}
    87ec:	dfc00117 	ldw	ra,4(sp)
    87f0:	dc000017 	ldw	r16,0(sp)
    87f4:	dec00204 	addi	sp,sp,8
}

void Display::setLedCoffe(int status)
{
	this->_ledCoffe = status;
	this->refreshLeds();
    87f8:	00086541 	jmpi	8654 <_ZN7Display11refreshLedsEv>

000087fc <_ZN8SelectorC1Ev>:
#include "Selector.h"

Selector::Selector(){
    87fc:	f800283a 	ret

00008800 <_ZN8Selector17isPrepararPressedEv>:

}

bool Selector::isPrepararPressed()
{
	return IORD(PREPARAR_BASE,0) == 0;
    8800:	00800074 	movhi	r2,1
    8804:	10840404 	addi	r2,r2,4112
    8808:	10800037 	ldwio	r2,0(r2)
    880c:	1005003a 	cmpeq	r2,r2,zero
}
    8810:	f800283a 	ret

00008814 <_ZN8Selector14isReporPressedEv>:

bool Selector::isReporPressed()
{
	return IORD(REPOR_BASE,0) == 0;
    8814:	00800074 	movhi	r2,1
    8818:	10840004 	addi	r2,r2,4096
    881c:	10800037 	ldwio	r2,0(r2)
    8820:	1005003a 	cmpeq	r2,r2,zero
}
    8824:	f800283a 	ret

00008828 <_ZN8Selector16getSelectedCoffeEv>:

coffeTypes Selector::getSelectedCoffe()
{
	int valor_lido = IORD(SWITCH_BASE,0);
    8828:	00800074 	movhi	r2,1
    882c:	10841804 	addi	r2,r2,4192
    8830:	10800037 	ldwio	r2,0(r2)

	if(CHECK_BIT(valor_lido, 0))
    8834:	10c0004c 	andi	r3,r2,1
    8838:	1800061e 	bne	r3,zero,8854 <_ZN8Selector16getSelectedCoffeEv+0x2c>
	{
		return T_COFFE;
	}
	else if(CHECK_BIT(valor_lido, 1))
    883c:	10c0008c 	andi	r3,r2,2
    8840:	1800061e 	bne	r3,zero,885c <_ZN8Selector16getSelectedCoffeEv+0x34>
	{
		return T_COFFEMILK;
	}
	else if(CHECK_BIT(valor_lido, 2))
    8844:	1080010c 	andi	r2,r2,4
    8848:	10000626 	beq	r2,zero,8864 <_ZN8Selector16getSelectedCoffeEv+0x3c>
	{
		return T_MOCACCHINO;
    884c:	008000c4 	movi	r2,3
    8850:	f800283a 	ret
{
	int valor_lido = IORD(SWITCH_BASE,0);

	if(CHECK_BIT(valor_lido, 0))
	{
		return T_COFFE;
    8854:	00800044 	movi	r2,1
    8858:	f800283a 	ret
	}
	else if(CHECK_BIT(valor_lido, 1))
	{
		return T_COFFEMILK;
    885c:	00800084 	movi	r2,2
    8860:	f800283a 	ret
	else if(CHECK_BIT(valor_lido, 2))
	{
		return T_MOCACCHINO;
	}

	return T_NONE;
    8864:	0005883a 	mov	r2,zero
}
    8868:	f800283a 	ret

0000886c <_ZN8Selector11isWithSugarEv>:

bool Selector::isWithSugar()
{
	int valor_lido = IORD(SWITCH_BASE,0);
    886c:	00800074 	movhi	r2,1
    8870:	10841804 	addi	r2,r2,4192
    8874:	10800037 	ldwio	r2,0(r2)

	if(CHECK_BIT(valor_lido, 3))
    8878:	1004d0fa 	srli	r2,r2,3
	}
	else
	{
		return false;
	}
}
    887c:	1080004c 	andi	r2,r2,1
    8880:	f800283a 	ret

00008884 <_ZN8Selector10getCupSizeEv>:

int Selector::getCupSize()
{
	int valor_lido = IORD(SWITCH_BASE,0);
    8884:	00800074 	movhi	r2,1
    8888:	10841804 	addi	r2,r2,4192
    888c:	10800037 	ldwio	r2,0(r2)
	return CHECK_BIT(valor_lido, 4);
}
    8890:	1080040c 	andi	r2,r2,16
    8894:	f800283a 	ret

00008898 <_ZN18ChocolateReservoirC1Ev>:
#include "ChocolateReservoir.h"


ChocolateReservoir::ChocolateReservoir(){
	this->amount = 10;
    8898:	00800284 	movi	r2,10
    889c:	20800015 	stw	r2,0(r4)
    88a0:	f800283a 	ret

000088a4 <_ZN18ChocolateReservoir9setAmountEi>:
}

void ChocolateReservoir::setAmount(int amount)
{
	this->amount = amount;
    88a4:	21400015 	stw	r5,0(r4)
    88a8:	f800283a 	ret

000088ac <_ZN18ChocolateReservoir9getAmountEv>:
}

int ChocolateReservoir::getAmount()
{
	return this->amount;
}
    88ac:	20800017 	ldw	r2,0(r4)
    88b0:	f800283a 	ret

000088b4 <_ZN14CoffeReservoirC1Ev>:
#include "CoffeReservoir.h"


CoffeReservoir::CoffeReservoir(){
	this->amount = 10;
    88b4:	00800284 	movi	r2,10
    88b8:	20800015 	stw	r2,0(r4)
    88bc:	f800283a 	ret

000088c0 <_ZN14CoffeReservoir9setAmountEi>:
}

void CoffeReservoir::setAmount(int amount)
{
	this->amount = amount;
    88c0:	21400015 	stw	r5,0(r4)
    88c4:	f800283a 	ret

000088c8 <_ZN14CoffeReservoir9getAmountEv>:
}

int CoffeReservoir::getAmount()
{
	return this->amount;
}
    88c8:	20800017 	ldw	r2,0(r4)
    88cc:	f800283a 	ret

000088d0 <_ZN13MilkReservoirC1Ev>:
#include "MilkReservoir.h"


MilkReservoir::MilkReservoir(){
	this->amount = 10;
    88d0:	00800284 	movi	r2,10
    88d4:	20800015 	stw	r2,0(r4)
    88d8:	f800283a 	ret

000088dc <_ZN13MilkReservoir9setAmountEi>:
}

void MilkReservoir::setAmount(int amount)
{
	this->amount = amount;
    88dc:	21400015 	stw	r5,0(r4)
    88e0:	f800283a 	ret

000088e4 <_ZN13MilkReservoir9getAmountEv>:
}

int MilkReservoir::getAmount()
{
	return this->amount;
}
    88e4:	20800017 	ldw	r2,0(r4)
    88e8:	f800283a 	ret

000088ec <_ZN14SugarReservoirC1Ev>:
#include "SugarReservoir.h"


SugarReservoir::SugarReservoir(){
	this->amount = 10;
    88ec:	00800284 	movi	r2,10
    88f0:	20800015 	stw	r2,0(r4)
    88f4:	f800283a 	ret

000088f8 <_ZN14SugarReservoir9setAmountEi>:
}

void SugarReservoir::setAmount(int amount)
{
	this->amount = amount;
    88f8:	21400015 	stw	r5,0(r4)
    88fc:	f800283a 	ret

00008900 <_ZN14SugarReservoir9getAmountEv>:
}

int SugarReservoir::getAmount()
{
	return this->amount;
}
    8900:	20800017 	ldw	r2,0(r4)
    8904:	f800283a 	ret

00008908 <_ZN14WaterReservoirC1Ev>:
#include "WaterReservoir.h"


WaterReservoir::WaterReservoir(){
    8908:	f800283a 	ret

0000890c <_ZN14WaterReservoir8getLevelEv>:

}

int WaterReservoir::getLevel()
{
	int valor_lido = IORD(SWITCH_BASE,0);
    890c:	00800074 	movhi	r2,1
    8910:	10841804 	addi	r2,r2,4192
    8914:	10800037 	ldwio	r2,0(r2)
	return CHECK_BIT(valor_lido, 5);
}
    8918:	1080080c 	andi	r2,r2,32
    891c:	f800283a 	ret

00008920 <_ZN14WaterReservoir7getTempEv>:

int WaterReservoir::getTemp()
{
	int valor_lido = IORD(SWITCH_BASE,0);
    8920:	00800074 	movhi	r2,1
    8924:	10841804 	addi	r2,r2,4192
    8928:	10800037 	ldwio	r2,0(r2)
	return CHECK_BIT(valor_lido, 6);
}
    892c:	1080100c 	andi	r2,r2,64
    8930:	f800283a 	ret

00008934 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8934:	deffff04 	addi	sp,sp,-4
    8938:	dfc00015 	stw	ra,0(sp)
    893c:	00c00074 	movhi	r3,1
    8940:	18e3d204 	addi	r3,r3,-28856
    8944:	01000074 	movhi	r4,1
    8948:	2123d304 	addi	r4,r4,-28852

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    894c:	1900061e 	bne	r3,r4,8968 <alt_load+0x34>
    8950:	00c00074 	movhi	r3,1
    8954:	18e00804 	addi	r3,r3,-32736
    8958:	01000074 	movhi	r4,1
    895c:	21200804 	addi	r4,r4,-32736
    8960:	1900151e 	bne	r3,r4,89b8 <alt_load+0x84>
    8964:	00000e06 	br	89a0 <alt_load+0x6c>
 * alt_load() is called when the code is executing from flash. In this case
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
    8968:	01400074 	movhi	r5,1
    896c:	2963d304 	addi	r5,r5,-28852
    8970:	00bfff04 	movi	r2,-4
    8974:	28cbc83a 	sub	r5,r5,r3
    8978:	288a703a 	and	r5,r5,r2
    897c:	0005883a 	mov	r2,zero
    8980:	00000506 	br	8998 <alt_load+0x64>
    8984:	208f883a 	add	r7,r4,r2
  {
    while( to != end )
    {
      *to++ = *from++;
    8988:	39c00017 	ldw	r7,0(r7)
    898c:	188d883a 	add	r6,r3,r2
    8990:	10800104 	addi	r2,r2,4
    8994:	31c00015 	stw	r7,0(r6)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    8998:	117ffa1e 	bne	r2,r5,8984 <alt_load+0x50>
    899c:	003fec06 	br	8950 <alt_load+0x1c>
    89a0:	00c00074 	movhi	r3,1
    89a4:	18e3b604 	addi	r3,r3,-28968
    89a8:	01000074 	movhi	r4,1
    89ac:	2123b604 	addi	r4,r4,-28968

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    89b0:	1900131e 	bne	r3,r4,8a00 <alt_load+0xcc>
    89b4:	00000e06 	br	89f0 <alt_load+0xbc>
    89b8:	01400074 	movhi	r5,1
    89bc:	29600804 	addi	r5,r5,-32736
    89c0:	00bfff04 	movi	r2,-4
    89c4:	28cbc83a 	sub	r5,r5,r3
    89c8:	288a703a 	and	r5,r5,r2
    89cc:	0005883a 	mov	r2,zero
    89d0:	00000506 	br	89e8 <alt_load+0xb4>
    89d4:	208f883a 	add	r7,r4,r2
  {
    while( to != end )
    {
      *to++ = *from++;
    89d8:	39c00017 	ldw	r7,0(r7)
    89dc:	188d883a 	add	r6,r3,r2
    89e0:	10800104 	addi	r2,r2,4
    89e4:	31c00015 	stw	r7,0(r6)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    89e8:	117ffa1e 	bne	r2,r5,89d4 <alt_load+0xa0>
    89ec:	003fec06 	br	89a0 <alt_load+0x6c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    89f0:	0008cf80 	call	8cf8 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    89f4:	dfc00017 	ldw	ra,0(sp)
    89f8:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    89fc:	0008d581 	jmpi	8d58 <alt_icache_flush_all>
 * alt_load() is called when the code is executing from flash. In this case
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
    8a00:	01400074 	movhi	r5,1
    8a04:	2963d204 	addi	r5,r5,-28856
    8a08:	00bfff04 	movi	r2,-4
    8a0c:	28cbc83a 	sub	r5,r5,r3
    8a10:	288a703a 	and	r5,r5,r2
    8a14:	0005883a 	mov	r2,zero
    8a18:	00000506 	br	8a30 <alt_load+0xfc>
    8a1c:	208f883a 	add	r7,r4,r2
    {
      *to++ = *from++;
    8a20:	39c00017 	ldw	r7,0(r7)
    8a24:	188d883a 	add	r6,r3,r2
    8a28:	10800104 	addi	r2,r2,4
    8a2c:	31c00015 	stw	r7,0(r6)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    8a30:	117ffa1e 	bne	r2,r5,8a1c <alt_load+0xe8>
    8a34:	003fee06 	br	89f0 <alt_load+0xbc>

00008a38 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8a38:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8a3c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8a40:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8a44:	0008c280 	call	8c28 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8a48:	0008c480 	call	8c48 <alt_sys_init>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    8a4c:	0008d100 	call	8d10 <_do_ctors>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8a50:	d1200617 	ldw	r4,-32744(gp)
    8a54:	d1600517 	ldw	r5,-32748(gp)
    8a58:	d1a00417 	ldw	r6,-32752(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    8a5c:	dfc00017 	ldw	ra,0(sp)
    8a60:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8a64:	000806c1 	jmpi	806c <main>

00008a68 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    8a68:	defff204 	addi	sp,sp,-56
    8a6c:	dfc00a15 	stw	ra,40(sp)
    8a70:	df000915 	stw	fp,36(sp)
    8a74:	ddc00815 	stw	r23,32(sp)
    8a78:	dd800715 	stw	r22,28(sp)
    8a7c:	dd400615 	stw	r21,24(sp)
    8a80:	dd000515 	stw	r20,20(sp)
    8a84:	dcc00415 	stw	r19,16(sp)
    8a88:	dc800315 	stw	r18,12(sp)
    8a8c:	dc400215 	stw	r17,8(sp)
    8a90:	dc000115 	stw	r16,4(sp)
    8a94:	d9400b15 	stw	r5,44(sp)
    8a98:	d9800c15 	stw	r6,48(sp)
    8a9c:	d9c00d15 	stw	r7,52(sp)
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    8aa0:	04c00944 	movi	r19,37
 */
void 
alt_printf(const char* fmt, ... )
{
	va_list args;
	va_start(args, fmt);
    8aa4:	dc000b04 	addi	r16,sp,44
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    8aa8:	2025883a 	mov	r18,r4
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
    8aac:	050018c4 	movi	r20,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
    8ab0:	05401e04 	movi	r21,120
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    8ab4:	05801cc4 	movi	r22,115
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    8ab8:	00003906 	br	8ba0 <alt_printf+0x138>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    8abc:	24c00226 	beq	r4,r19,8ac8 <alt_printf+0x60>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    8ac0:	94800044 	addi	r18,r18,1
    8ac4:	00000506 	br	8adc <alt_printf+0x74>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    8ac8:	90800047 	ldb	r2,1(r18)
    8acc:	94800084 	addi	r18,r18,2
    8ad0:	10003526 	beq	r2,zero,8ba8 <alt_printf+0x140>
            {
                if (c == '%')
    8ad4:	14c0031e 	bne	r2,r19,8ae4 <alt_printf+0x7c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
    8ad8:	9809883a 	mov	r4,r19
    8adc:	0008bd80 	call	8bd8 <alt_putchar>
    8ae0:	00002f06 	br	8ba0 <alt_printf+0x138>
                } 
                else if (c == 'c')
    8ae4:	1500051e 	bne	r2,r20,8afc <alt_printf+0x94>
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
    8ae8:	81000017 	ldw	r4,0(r16)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
    8aec:	84400104 	addi	r17,r16,4
    8af0:	8821883a 	mov	r16,r17
                    alt_putchar(v);
    8af4:	0008bd80 	call	8bd8 <alt_putchar>
    8af8:	00002906 	br	8ba0 <alt_printf+0x138>
                }
                else if (c == 'x')
    8afc:	1540201e 	bne	r2,r21,8b80 <alt_printf+0x118>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    8b00:	85c00017 	ldw	r23,0(r16)
    8b04:	84000104 	addi	r16,r16,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    8b08:	b800041e 	bne	r23,zero,8b1c <alt_printf+0xb4>
                    {
                        alt_putchar('0');
    8b0c:	01000c04 	movi	r4,48
    8b10:	003ff206 	br	8adc <alt_printf+0x74>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;
    8b14:	8c7fff04 	addi	r17,r17,-4
    8b18:	00000206 	br	8b24 <alt_printf+0xbc>
                    unsigned long v = va_arg(args, unsigned long);
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    8b1c:	04400704 	movi	r17,28
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    8b20:	00c003c4 	movi	r3,15
    8b24:	1c44983a 	sll	r2,r3,r17
    8b28:	15c4703a 	and	r2,r2,r23
    8b2c:	103ff926 	beq	r2,zero,8b14 <alt_printf+0xac>
    8b30:	00000f06 	br	8b70 <alt_printf+0x108>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    8b34:	e448983a 	sll	r4,fp,r17
    8b38:	25c8703a 	and	r4,r4,r23
    8b3c:	2448d83a 	srl	r4,r4,r17
                        if (digit <= 9)
    8b40:	19000236 	bltu	r3,r4,8b4c <alt_printf+0xe4>
                            c = '0' + digit;
    8b44:	21000c04 	addi	r4,r4,48
    8b48:	00000106 	br	8b50 <alt_printf+0xe8>
                        else
                            c = 'a' + digit - 10;
    8b4c:	210015c4 	addi	r4,r4,87
                        alt_putchar(c);
    8b50:	21003fcc 	andi	r4,r4,255
    8b54:	2100201c 	xori	r4,r4,128
    8b58:	213fe004 	addi	r4,r4,-128
    8b5c:	d8c00015 	stw	r3,0(sp)
    8b60:	0008bd80 	call	8bd8 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    8b64:	8c7fff04 	addi	r17,r17,-4
    8b68:	d8c00017 	ldw	r3,0(sp)
    8b6c:	00000206 	br	8b78 <alt_printf+0x110>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    8b70:	070003c4 	movi	fp,15
                        if (digit <= 9)
    8b74:	00c00244 	movi	r3,9
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    8b78:	883fee0e 	bge	r17,zero,8b34 <alt_printf+0xcc>
    8b7c:	00000806 	br	8ba0 <alt_printf+0x138>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    8b80:	1580071e 	bne	r2,r22,8ba0 <alt_printf+0x138>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    8b84:	84400017 	ldw	r17,0(r16)
    8b88:	84000104 	addi	r16,r16,4

                    while(*s)
    8b8c:	00000206 	br	8b98 <alt_printf+0x130>
                      alt_putchar(*s++);
    8b90:	8c400044 	addi	r17,r17,1
    8b94:	0008bd80 	call	8bd8 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
    8b98:	89000007 	ldb	r4,0(r17)
    8b9c:	203ffc1e 	bne	r4,zero,8b90 <alt_printf+0x128>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    8ba0:	91000007 	ldb	r4,0(r18)
    8ba4:	203fc51e 	bne	r4,zero,8abc <alt_printf+0x54>
            {
                break;
            }
        }
    }
}
    8ba8:	dfc00a17 	ldw	ra,40(sp)
    8bac:	df000917 	ldw	fp,36(sp)
    8bb0:	ddc00817 	ldw	r23,32(sp)
    8bb4:	dd800717 	ldw	r22,28(sp)
    8bb8:	dd400617 	ldw	r21,24(sp)
    8bbc:	dd000517 	ldw	r20,20(sp)
    8bc0:	dcc00417 	ldw	r19,16(sp)
    8bc4:	dc800317 	ldw	r18,12(sp)
    8bc8:	dc400217 	ldw	r17,8(sp)
    8bcc:	dc000117 	ldw	r16,4(sp)
    8bd0:	dec00e04 	addi	sp,sp,56
    8bd4:	f800283a 	ret

00008bd8 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    8bd8:	defffd04 	addi	sp,sp,-12
    8bdc:	dc000115 	stw	r16,4(sp)
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
    8be0:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    8be4:	2021883a 	mov	r16,r4
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    8be8:	d80b883a 	mov	r5,sp
    8bec:	01000074 	movhi	r4,1
    8bf0:	2123d204 	addi	r4,r4,-28856
    8bf4:	01800044 	movi	r6,1
    8bf8:	000f883a 	mov	r7,zero
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    8bfc:	dfc00215 	stw	ra,8(sp)
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    8c00:	0008c4c0 	call	8c4c <altera_avalon_jtag_uart_write>
    8c04:	00ffffc4 	movi	r3,-1
    8c08:	10c0011e 	bne	r2,r3,8c10 <alt_putchar+0x38>
        return -1;
    8c0c:	1021883a 	mov	r16,r2
    }
    return c;
#else
    return putchar(c);
#endif
}
    8c10:	8005883a 	mov	r2,r16
    8c14:	dfc00217 	ldw	ra,8(sp)
    8c18:	dc000117 	ldw	r16,4(sp)
    8c1c:	dec00304 	addi	sp,sp,12
    8c20:	f800283a 	ret

00008c24 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    8c24:	0008c801 	jmpi	8c80 <alt_busy_sleep>

00008c28 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    8c28:	deffff04 	addi	sp,sp,-4
    8c2c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
    8c30:	0008d640 	call	8d64 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    8c34:	00800044 	movi	r2,1
    8c38:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    8c3c:	dfc00017 	ldw	ra,0(sp)
    8c40:	dec00104 	addi	sp,sp,4
    8c44:	f800283a 	ret

00008c48 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    8c48:	f800283a 	ret

00008c4c <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    8c4c:	20c00017 	ldw	r3,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    8c50:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    8c54:	2989883a 	add	r4,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    8c58:	19800104 	addi	r6,r3,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    8c5c:	00000606 	br	8c78 <altera_avalon_jtag_uart_write+0x2c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    8c60:	31c00037 	ldwio	r7,0(r6)
    8c64:	39ffffec 	andhi	r7,r7,65535
    8c68:	383ffd26 	beq	r7,zero,8c60 <altera_avalon_jtag_uart_write+0x14>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    8c6c:	29c00007 	ldb	r7,0(r5)
    8c70:	29400044 	addi	r5,r5,1
    8c74:	19c00035 	stwio	r7,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    8c78:	293ff936 	bltu	r5,r4,8c60 <altera_avalon_jtag_uart_write+0x14>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
    8c7c:	f800283a 	ret

00008c80 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    8c80:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    8c84:	01420034 	movhi	r5,2048
    8c88:	297fffc4 	addi	r5,r5,-1
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    8c8c:	dc000015 	stw	r16,0(sp)
    8c90:	dfc00115 	stw	ra,4(sp)
    8c94:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    8c98:	0008ec40 	call	8ec4 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    8c9c:	10000e26 	beq	r2,zero,8cd8 <alt_busy_sleep+0x58>
    8ca0:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    8ca4:	01600034 	movhi	r5,32768
    8ca8:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    8cac:	013e0034 	movhi	r4,63488
    8cb0:	21000044 	addi	r4,r4,1
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    8cb4:	297fffc4 	addi	r5,r5,-1
    8cb8:	283ffe1e 	bne	r5,zero,8cb4 <alt_busy_sleep+0x34>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    8cbc:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    8cc0:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    8cc4:	18bffb16 	blt	r3,r2,8cb4 <alt_busy_sleep+0x34>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    8cc8:	8020913a 	slli	r16,r16,4
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    8ccc:	843fffc4 	addi	r16,r16,-1
    8cd0:	803ffe1e 	bne	r16,zero,8ccc <alt_busy_sleep+0x4c>
    8cd4:	00000306 	br	8ce4 <alt_busy_sleep+0x64>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    8cd8:	8020913a 	slli	r16,r16,4
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    8cdc:	843fffc4 	addi	r16,r16,-1
    8ce0:	043ffe16 	blt	zero,r16,8cdc <alt_busy_sleep+0x5c>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    8ce4:	0005883a 	mov	r2,zero
    8ce8:	dfc00117 	ldw	ra,4(sp)
    8cec:	dc000017 	ldw	r16,0(sp)
    8cf0:	dec00204 	addi	sp,sp,8
    8cf4:	f800283a 	ret

00008cf8 <alt_dcache_flush_all>:
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    8cf8:	0005883a 	mov	r2,zero
    8cfc:	00c20004 	movi	r3,2048
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    8d00:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    8d04:	10800804 	addi	r2,r2,32
    8d08:	10fffd1e 	bne	r2,r3,8d00 <alt_dcache_flush_all+0x8>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    8d0c:	f800283a 	ret

00008d10 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    8d10:	defffd04 	addi	sp,sp,-12
    8d14:	dc400115 	stw	r17,4(sp)
    8d18:	dc000015 	stw	r16,0(sp)
    8d1c:	dfc00215 	stw	ra,8(sp)
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    8d20:	04000074 	movhi	r16,1
    8d24:	8423b504 	addi	r16,r16,-28972
    8d28:	04400074 	movhi	r17,1
    8d2c:	8c63b504 	addi	r17,r17,-28972
    8d30:	00000306 	br	8d40 <_do_ctors+0x30>
        (*ctor) (); 
    8d34:	80800017 	ldw	r2,0(r16)

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    8d38:	843fff04 	addi	r16,r16,-4
        (*ctor) (); 
    8d3c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    8d40:	847ffc2e 	bgeu	r16,r17,8d34 <_do_ctors+0x24>
        (*ctor) (); 
}
    8d44:	dfc00217 	ldw	ra,8(sp)
    8d48:	dc400117 	ldw	r17,4(sp)
    8d4c:	dc000017 	ldw	r16,0(sp)
    8d50:	dec00304 	addi	sp,sp,12
    8d54:	f800283a 	ret

00008d58 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    8d58:	0009883a 	mov	r4,zero
    8d5c:	01440004 	movi	r5,4096
    8d60:	0008d6c1 	jmpi	8d6c <alt_icache_flush>

00008d64 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    8d64:	000170fa 	wrctl	ienable,zero
    8d68:	f800283a 	ret

00008d6c <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
    8d6c:	00840004 	movi	r2,4096
    8d70:	1140012e 	bgeu	r2,r5,8d78 <alt_icache_flush+0xc>
    8d74:	100b883a 	mov	r5,r2
    8d78:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    8d7c:	2005883a 	mov	r2,r4
    8d80:	00000206 	br	8d8c <alt_icache_flush+0x20>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    8d84:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    8d88:	10800804 	addi	r2,r2,32
    8d8c:	117ffd36 	bltu	r2,r5,8d84 <alt_icache_flush+0x18>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    8d90:	210007cc 	andi	r4,r4,31
    8d94:	20000126 	beq	r4,zero,8d9c <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    8d98:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    8d9c:	0000203a 	flushp
    8da0:	f800283a 	ret

00008da4 <udivmodsi4>:
    8da4:	2005883a 	mov	r2,r4
    8da8:	2900182e 	bgeu	r5,r4,8e0c <udivmodsi4+0x68>
    8dac:	28001716 	blt	r5,zero,8e0c <udivmodsi4+0x68>
    8db0:	01000804 	movi	r4,32
    8db4:	00c00044 	movi	r3,1
    8db8:	00000206 	br	8dc4 <udivmodsi4+0x20>
    8dbc:	20001126 	beq	r4,zero,8e04 <udivmodsi4+0x60>
    8dc0:	28000516 	blt	r5,zero,8dd8 <udivmodsi4+0x34>
    8dc4:	294b883a 	add	r5,r5,r5
    8dc8:	213fffc4 	addi	r4,r4,-1
    8dcc:	18c7883a 	add	r3,r3,r3
    8dd0:	28bffa36 	bltu	r5,r2,8dbc <udivmodsi4+0x18>
    8dd4:	18000b26 	beq	r3,zero,8e04 <udivmodsi4+0x60>
    8dd8:	0009883a 	mov	r4,zero
    8ddc:	11400236 	bltu	r2,r5,8de8 <udivmodsi4+0x44>
    8de0:	1145c83a 	sub	r2,r2,r5
    8de4:	20c8b03a 	or	r4,r4,r3
    8de8:	1806d07a 	srli	r3,r3,1
    8dec:	280ad07a 	srli	r5,r5,1
    8df0:	183ffa1e 	bne	r3,zero,8ddc <udivmodsi4+0x38>
    8df4:	3000021e 	bne	r6,zero,8e00 <udivmodsi4+0x5c>
    8df8:	2005883a 	mov	r2,r4
    8dfc:	f800283a 	ret
    8e00:	f800283a 	ret
    8e04:	0009883a 	mov	r4,zero
    8e08:	003ffa06 	br	8df4 <udivmodsi4+0x50>
    8e0c:	00c00044 	movi	r3,1
    8e10:	0009883a 	mov	r4,zero
    8e14:	003ff106 	br	8ddc <udivmodsi4+0x38>

00008e18 <__divsi3>:
    8e18:	defffe04 	addi	sp,sp,-8
    8e1c:	dfc00115 	stw	ra,4(sp)
    8e20:	dc000015 	stw	r16,0(sp)
    8e24:	20000a16 	blt	r4,zero,8e50 <__divsi3+0x38>
    8e28:	0021883a 	mov	r16,zero
    8e2c:	28000b16 	blt	r5,zero,8e5c <__divsi3+0x44>
    8e30:	000d883a 	mov	r6,zero
    8e34:	0008da40 	call	8da4 <udivmodsi4>
    8e38:	80000126 	beq	r16,zero,8e40 <__divsi3+0x28>
    8e3c:	0085c83a 	sub	r2,zero,r2
    8e40:	dfc00117 	ldw	ra,4(sp)
    8e44:	dc000017 	ldw	r16,0(sp)
    8e48:	dec00204 	addi	sp,sp,8
    8e4c:	f800283a 	ret
    8e50:	0109c83a 	sub	r4,zero,r4
    8e54:	04000044 	movi	r16,1
    8e58:	283ff50e 	bge	r5,zero,8e30 <__divsi3+0x18>
    8e5c:	014bc83a 	sub	r5,zero,r5
    8e60:	8400005c 	xori	r16,r16,1
    8e64:	003ff206 	br	8e30 <__divsi3+0x18>

00008e68 <__modsi3>:
    8e68:	deffff04 	addi	sp,sp,-4
    8e6c:	dfc00015 	stw	ra,0(sp)
    8e70:	20000516 	blt	r4,zero,8e88 <__modsi3+0x20>
    8e74:	28000c16 	blt	r5,zero,8ea8 <__modsi3+0x40>
    8e78:	01800044 	movi	r6,1
    8e7c:	dfc00017 	ldw	ra,0(sp)
    8e80:	dec00104 	addi	sp,sp,4
    8e84:	0008da41 	jmpi	8da4 <udivmodsi4>
    8e88:	0109c83a 	sub	r4,zero,r4
    8e8c:	28000b16 	blt	r5,zero,8ebc <__modsi3+0x54>
    8e90:	01800044 	movi	r6,1
    8e94:	0008da40 	call	8da4 <udivmodsi4>
    8e98:	0085c83a 	sub	r2,zero,r2
    8e9c:	dfc00017 	ldw	ra,0(sp)
    8ea0:	dec00104 	addi	sp,sp,4
    8ea4:	f800283a 	ret
    8ea8:	014bc83a 	sub	r5,zero,r5
    8eac:	01800044 	movi	r6,1
    8eb0:	dfc00017 	ldw	ra,0(sp)
    8eb4:	dec00104 	addi	sp,sp,4
    8eb8:	0008da41 	jmpi	8da4 <udivmodsi4>
    8ebc:	014bc83a 	sub	r5,zero,r5
    8ec0:	003ff306 	br	8e90 <__modsi3+0x28>

00008ec4 <__udivsi3>:
    8ec4:	000d883a 	mov	r6,zero
    8ec8:	0008da41 	jmpi	8da4 <udivmodsi4>

00008ecc <__umodsi3>:
    8ecc:	01800044 	movi	r6,1
    8ed0:	0008da41 	jmpi	8da4 <udivmodsi4>
    8ed4:	000082c4 	movi	zero,523
